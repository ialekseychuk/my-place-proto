// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: company/v1/working_hours.proto

package companyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkingHoursService_SetLocationWorkingHours_FullMethodName    = "/company.v1.WorkingHoursService/SetLocationWorkingHours"
	WorkingHoursService_GetLocationWorkingHours_FullMethodName    = "/company.v1.WorkingHoursService/GetLocationWorkingHours"
	WorkingHoursService_DeleteLocationWorkingHours_FullMethodName = "/company.v1.WorkingHoursService/DeleteLocationWorkingHours"
)

// WorkingHoursServiceClient is the client API for WorkingHoursService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkingHoursServiceClient interface {
	// Set working hours for a location
	SetLocationWorkingHours(ctx context.Context, in *SetLocationWorkingHoursRequest, opts ...grpc.CallOption) (*SetLocationWorkingHoursResponse, error)
	// Get working hours for a location
	GetLocationWorkingHours(ctx context.Context, in *GetLocationWorkingHoursRequest, opts ...grpc.CallOption) (*GetLocationWorkingHoursResponse, error)
	// Delete working hours for a location
	DeleteLocationWorkingHours(ctx context.Context, in *DeleteLocationWorkingHoursRequest, opts ...grpc.CallOption) (*DeleteLocationWorkingHoursResponse, error)
}

type workingHoursServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkingHoursServiceClient(cc grpc.ClientConnInterface) WorkingHoursServiceClient {
	return &workingHoursServiceClient{cc}
}

func (c *workingHoursServiceClient) SetLocationWorkingHours(ctx context.Context, in *SetLocationWorkingHoursRequest, opts ...grpc.CallOption) (*SetLocationWorkingHoursResponse, error) {
	out := new(SetLocationWorkingHoursResponse)
	err := c.cc.Invoke(ctx, WorkingHoursService_SetLocationWorkingHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workingHoursServiceClient) GetLocationWorkingHours(ctx context.Context, in *GetLocationWorkingHoursRequest, opts ...grpc.CallOption) (*GetLocationWorkingHoursResponse, error) {
	out := new(GetLocationWorkingHoursResponse)
	err := c.cc.Invoke(ctx, WorkingHoursService_GetLocationWorkingHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workingHoursServiceClient) DeleteLocationWorkingHours(ctx context.Context, in *DeleteLocationWorkingHoursRequest, opts ...grpc.CallOption) (*DeleteLocationWorkingHoursResponse, error) {
	out := new(DeleteLocationWorkingHoursResponse)
	err := c.cc.Invoke(ctx, WorkingHoursService_DeleteLocationWorkingHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkingHoursServiceServer is the server API for WorkingHoursService service.
// All implementations must embed UnimplementedWorkingHoursServiceServer
// for forward compatibility
type WorkingHoursServiceServer interface {
	// Set working hours for a location
	SetLocationWorkingHours(context.Context, *SetLocationWorkingHoursRequest) (*SetLocationWorkingHoursResponse, error)
	// Get working hours for a location
	GetLocationWorkingHours(context.Context, *GetLocationWorkingHoursRequest) (*GetLocationWorkingHoursResponse, error)
	// Delete working hours for a location
	DeleteLocationWorkingHours(context.Context, *DeleteLocationWorkingHoursRequest) (*DeleteLocationWorkingHoursResponse, error)
	mustEmbedUnimplementedWorkingHoursServiceServer()
}

// UnimplementedWorkingHoursServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkingHoursServiceServer struct {
}

func (UnimplementedWorkingHoursServiceServer) SetLocationWorkingHours(context.Context, *SetLocationWorkingHoursRequest) (*SetLocationWorkingHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocationWorkingHours not implemented")
}
func (UnimplementedWorkingHoursServiceServer) GetLocationWorkingHours(context.Context, *GetLocationWorkingHoursRequest) (*GetLocationWorkingHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationWorkingHours not implemented")
}
func (UnimplementedWorkingHoursServiceServer) DeleteLocationWorkingHours(context.Context, *DeleteLocationWorkingHoursRequest) (*DeleteLocationWorkingHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocationWorkingHours not implemented")
}
func (UnimplementedWorkingHoursServiceServer) mustEmbedUnimplementedWorkingHoursServiceServer() {}

// UnsafeWorkingHoursServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkingHoursServiceServer will
// result in compilation errors.
type UnsafeWorkingHoursServiceServer interface {
	mustEmbedUnimplementedWorkingHoursServiceServer()
}

func RegisterWorkingHoursServiceServer(s grpc.ServiceRegistrar, srv WorkingHoursServiceServer) {
	s.RegisterService(&WorkingHoursService_ServiceDesc, srv)
}

func _WorkingHoursService_SetLocationWorkingHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLocationWorkingHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingHoursServiceServer).SetLocationWorkingHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingHoursService_SetLocationWorkingHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingHoursServiceServer).SetLocationWorkingHours(ctx, req.(*SetLocationWorkingHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkingHoursService_GetLocationWorkingHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationWorkingHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingHoursServiceServer).GetLocationWorkingHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingHoursService_GetLocationWorkingHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingHoursServiceServer).GetLocationWorkingHours(ctx, req.(*GetLocationWorkingHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkingHoursService_DeleteLocationWorkingHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocationWorkingHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingHoursServiceServer).DeleteLocationWorkingHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingHoursService_DeleteLocationWorkingHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingHoursServiceServer).DeleteLocationWorkingHours(ctx, req.(*DeleteLocationWorkingHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkingHoursService_ServiceDesc is the grpc.ServiceDesc for WorkingHoursService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkingHoursService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.v1.WorkingHoursService",
	HandlerType: (*WorkingHoursServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLocationWorkingHours",
			Handler:    _WorkingHoursService_SetLocationWorkingHours_Handler,
		},
		{
			MethodName: "GetLocationWorkingHours",
			Handler:    _WorkingHoursService_GetLocationWorkingHours_Handler,
		},
		{
			MethodName: "DeleteLocationWorkingHours",
			Handler:    _WorkingHoursService_DeleteLocationWorkingHours_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company/v1/working_hours.proto",
}
