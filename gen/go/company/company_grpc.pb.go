// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: company/company.proto

package companyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Company_CreateBussiness_FullMethodName    = "/company.Company/CreateBussiness"
	Company_GetBussiness_FullMethodName       = "/company.Company/GetBussiness"
	Company_GetBussinesByOwner_FullMethodName = "/company.Company/GetBussinesByOwner"
	Company_CreateLocation_FullMethodName     = "/company.Company/CreateLocation"
)

// CompanyClient is the client API for Company service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyClient interface {
	CreateBussiness(ctx context.Context, in *CreateBusinessRequest, opts ...grpc.CallOption) (*CreateBusinessResponse, error)
	GetBussiness(ctx context.Context, in *GetBusinessRequest, opts ...grpc.CallOption) (*GetBusinessResponse, error)
	// rpc UpdateBussiness(UpdateBusinessRequest) returns (UpdateBusinessResponse);
	GetBussinesByOwner(ctx context.Context, in *GetBussinesByOwnerRequest, opts ...grpc.CallOption) (*ListBusinessResponse, error)
	// --- locations---
	CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error)
}

type companyClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyClient(cc grpc.ClientConnInterface) CompanyClient {
	return &companyClient{cc}
}

func (c *companyClient) CreateBussiness(ctx context.Context, in *CreateBusinessRequest, opts ...grpc.CallOption) (*CreateBusinessResponse, error) {
	out := new(CreateBusinessResponse)
	err := c.cc.Invoke(ctx, Company_CreateBussiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetBussiness(ctx context.Context, in *GetBusinessRequest, opts ...grpc.CallOption) (*GetBusinessResponse, error) {
	out := new(GetBusinessResponse)
	err := c.cc.Invoke(ctx, Company_GetBussiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetBussinesByOwner(ctx context.Context, in *GetBussinesByOwnerRequest, opts ...grpc.CallOption) (*ListBusinessResponse, error) {
	out := new(ListBusinessResponse)
	err := c.cc.Invoke(ctx, Company_GetBussinesByOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error) {
	out := new(CreateLocationResponse)
	err := c.cc.Invoke(ctx, Company_CreateLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServer is the server API for Company service.
// All implementations must embed UnimplementedCompanyServer
// for forward compatibility
type CompanyServer interface {
	CreateBussiness(context.Context, *CreateBusinessRequest) (*CreateBusinessResponse, error)
	GetBussiness(context.Context, *GetBusinessRequest) (*GetBusinessResponse, error)
	// rpc UpdateBussiness(UpdateBusinessRequest) returns (UpdateBusinessResponse);
	GetBussinesByOwner(context.Context, *GetBussinesByOwnerRequest) (*ListBusinessResponse, error)
	// --- locations---
	CreateLocation(context.Context, *CreateLocationRequest) (*CreateLocationResponse, error)
	mustEmbedUnimplementedCompanyServer()
}

// UnimplementedCompanyServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyServer struct {
}

func (UnimplementedCompanyServer) CreateBussiness(context.Context, *CreateBusinessRequest) (*CreateBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBussiness not implemented")
}
func (UnimplementedCompanyServer) GetBussiness(context.Context, *GetBusinessRequest) (*GetBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBussiness not implemented")
}
func (UnimplementedCompanyServer) GetBussinesByOwner(context.Context, *GetBussinesByOwnerRequest) (*ListBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBussinesByOwner not implemented")
}
func (UnimplementedCompanyServer) CreateLocation(context.Context, *CreateLocationRequest) (*CreateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocation not implemented")
}
func (UnimplementedCompanyServer) mustEmbedUnimplementedCompanyServer() {}

// UnsafeCompanyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServer will
// result in compilation errors.
type UnsafeCompanyServer interface {
	mustEmbedUnimplementedCompanyServer()
}

func RegisterCompanyServer(s grpc.ServiceRegistrar, srv CompanyServer) {
	s.RegisterService(&Company_ServiceDesc, srv)
}

func _Company_CreateBussiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).CreateBussiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Company_CreateBussiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).CreateBussiness(ctx, req.(*CreateBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetBussiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetBussiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Company_GetBussiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetBussiness(ctx, req.(*GetBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetBussinesByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBussinesByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetBussinesByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Company_GetBussinesByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetBussinesByOwner(ctx, req.(*GetBussinesByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_CreateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).CreateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Company_CreateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).CreateLocation(ctx, req.(*CreateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Company_ServiceDesc is the grpc.ServiceDesc for Company service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Company_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.Company",
	HandlerType: (*CompanyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBussiness",
			Handler:    _Company_CreateBussiness_Handler,
		},
		{
			MethodName: "GetBussiness",
			Handler:    _Company_GetBussiness_Handler,
		},
		{
			MethodName: "GetBussinesByOwner",
			Handler:    _Company_GetBussinesByOwner_Handler,
		},
		{
			MethodName: "CreateLocation",
			Handler:    _Company_CreateLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company/company.proto",
}
