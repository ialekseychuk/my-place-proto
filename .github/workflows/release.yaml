name: Release Proto

on:
  push:
    branches:
      - main

permissions:
  contents: write
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Get latest tag
        id: get_tag
        run: |
          # Получаем последний тег
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "current_tag=$TAG" >> $GITHUB_OUTPUT
          echo "Current tag: $TAG"

      - name: Bump patch version
        id: bump
        run: |
          CURRENT_TAG="${{ steps.get_tag.outputs.current_tag }}"
          
          # Убираем 'v' из начала тега
          OLD_VER=${CURRENT_TAG#v}
          
          # Разбиваем версию на компоненты
          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VER"
          
          # Увеличиваем только PATCH версию
          PATCH=$((PATCH + 1))
          
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "New tag: $NEW_TAG"

      - name: Create and push new tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          NEW_TAG="${{ steps.bump.outputs.new_tag }}"

          # Проверяем, существует ли такой тег на удалённом репозитории
          if git ls-remote --tags origin | grep -q "refs/tags/$NEW_TAG"; then
            COMMIT_SHA=$(git rev-parse --short HEAD)
            NEW_TAG="${NEW_TAG}-${COMMIT_SHA}"
            echo "Tag already exists, using unique tag: $NEW_TAG"
          fi

          # Создаём и пушим тег
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "Tag $NEW_TAG created and pushed successfully"